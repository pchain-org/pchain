package main

import (
	"bufio"
	"errors"
	"fmt"
	gethmain "github.com/ethereum/go-ethereum/cmd/geth"
	"github.com/ethereum/go-ethereum/cmd/utils"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/consensus"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/core/rawdb"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/eth"
	"github.com/ethereum/go-ethereum/ethdb"
	"github.com/ethereum/go-ethereum/log"
	"github.com/ethereum/go-ethereum/params"
	pabi "github.com/pchain/abi"
	"github.com/pchain/chain"
	"github.com/syndtr/goleveldb/leveldb"
	"gopkg.in/urfave/cli.v1"
	"math/big"
	"os"
	"strings"
	"time"
)

var BlockWithDiccArray = []uint64{
	34505, 52827, 130812, 130944, 134224, 134636, 136096, 141432, 148456, 148537, 148825, 149006, 149056, 149095, 149316, 149344, 149396, 149402, 149440, 149462, 150398, 166781, 166953, 167075, 167342, 167597, 167664, 167742, 167778, 168028, 168300, 168533, 168829, 168964, 171184, 176481, 176491, 176906, 187067, 187469, 188247, 234327, 234334, 234338, 234347, 234352, 245608, 246102, 248439, 248444, 249601, 249738, 250413, 251410, 251421, 252036, 252884, 254252, 296212, 298187, 298286, 395375, 416911, 439674, 440091, 658139, 859838, 859851, 869572, 876668, 876889, 892168, 892209, 892298, 892357, 892377, 892401, 892589, 892625, 896813, 897644, 902583, 915359, 915543, 915613, 917977, 918005, 920484, 920664, 921946, 927844, 943797, 943939, 943958, 944038, 944849, 944886, 944978, 945260, 966521, 966852, 969040, 981577, 984787, 1016530, 1032437, 1037785, 1044856, 1102503, 1121690, 1125623, 1160233, 1186262, 1265713, 1266391, 1266450, 1275962, 1363155, 1363167, 1375075, 1430533, 1488957, 1511980, 1534236, 1535206, 1626584, 1626740, 1626758, 1626853, 1626927, 1626958, 1627066, 1639080, 1646628, 1646698, 1649457, 1649485, 1649540, 1649629,
	1649723, 1649830, 1650116, 1650239, 1650318, 1650441, 1653629, 1653733, 1663544, 1663733, 1663761, 1663791, 1663864, 1664065, 1664182, 1664580, 1668717, 1668996, 1669202, 1672424, 1672453, 1672465, 1672473, 1672482, 1672488, 1673880, 1708131, 1708141, 1708150, 1708176, 1708194, 1708209, 1745245, 1745341, 1745376, 1745380, 1745381, 1745551, 1748843, 1749280, 1749283, 1749285, 1749295, 1749303, 1749304, 1749318, 1749320, 1749325, 1749328, 1749344, 1749348, 1749349, 1749352, 1749354, 1749399, 1749401, 1749406, 1749415, 1749421, 1749427, 1749434, 1749443, 1749444, 1749450, 1749452, 1749454, 1749456, 1749463, 1749738, 1749750, 1749758, 1749766, 1749770, 1749776, 1749785, 1749788, 1749797, 1749810, 1749815, 1749825, 1749834, 1749836, 1749850, 1749852, 1749856, 1749860, 1749870, 1749878, 1749888, 1749895, 1749903, 1749913, 1749915, 1749928, 1749933, 1749941, 1749945, 1749958, 1749964, 1749971, 1749982, 1749984, 1749992, 1750004, 1750014, 1750023, 1750038, 1750046, 1750052, 1750063, 1750075, 1750087, 1750092, 1750094, 1750097, 1750106, 1750113, 1750122, 1750127, 1750130, 1750144, 1750151, 1750158, 1750166, 1750169, 1750179,
	1750193, 1750205, 1750209, 1750218, 1750226, 1750229, 1750237, 1750247, 1750253, 1750256, 1750263, 1750273, 1750275, 1750285, 1750297, 1750303, 1750310, 1750317, 1750325, 1750337, 1750348, 1750361, 1750366, 1750374, 1750380, 1750398, 1750404, 1750412, 1750431, 1750441, 1750453, 1750461, 1750468, 1750472, 1750480, 1750488, 1750492, 1750503, 1750513, 1750523, 1750535, 1750548, 1750559, 1750562, 1750572, 1750584, 1750596, 1750608, 1750624, 1750632, 1750642, 1750651, 1750658, 1750664, 1750670, 1750681, 1750685, 1750694, 1750703, 1750710, 1750716, 1750719, 1750742, 1750744, 1750745, 1750748, 1750751, 1750752, 1750755, 1750758, 1750759, 1750762, 1750765, 1750767, 1750771, 1750773, 1750775, 1750779, 1750780, 1750784, 1750787, 1750788, 1750789, 1750790, 1750793, 1750797, 1750799, 1750800, 1750804, 1750808, 1750812, 1750814, 1750815, 1750819, 1750820, 1750822, 1750826, 1750829, 1750831, 1750833, 1750836, 1750840, 1750841, 1750842, 1750843, 1750846, 1750849, 1750852, 1750853, 1750856, 1750859, 1750861, 1750862, 1750863, 1750864, 1750867, 1750868, 1750871, 1750875, 1750879, 1750881, 1750883, 1750885, 1750890, 1750891, 1750894,
	1750898, 1750902, 1750906, 1750908, 1750910, 1750914, 1750917, 1750918, 1750919, 1750922, 1750926, 1750930, 1750932, 1750935, 1750939, 1750941, 1750944, 1750948, 1750952, 1750955, 1750957, 1750958, 1750959, 1750962, 1750963, 1750964, 1750966, 1750967, 1750970, 1750971, 1750972, 1750975, 1750979, 1750980, 1750981, 1750983, 1750985, 1750986, 1750987, 1750990, 1750993, 1750994, 1750997, 1751001, 1751003, 1751007, 1751008, 1751010, 1751013, 1751014, 1751016, 1751019, 1751022, 1751024, 1751026, 1751030, 1751031, 1751034, 1751038, 1751039, 1751042, 1751043, 1751046, 1751048, 1751050, 1751053, 1751057, 1751059, 1751063, 1751066, 1751067, 1751071, 1751072, 1751073, 1751074, 1751078, 1751082, 1751086, 1751090, 1751091, 1751092, 1751095, 1751099, 1751101, 1751102, 1751106, 1751107, 1751111, 1751113, 1751115, 1751119, 1751122, 1751123, 1751125, 1751129, 1751132, 1751133, 1751136, 1751139, 1751140, 1751141, 1751144, 1751148, 1751151, 1751152, 1751155, 1751159, 1751161, 1751164, 1751165, 1751166, 1751169, 1751170, 1751171, 1751174, 1751176, 1751180, 1751181, 1751186, 1751187, 1751188, 1751189, 1751193, 1751196, 1751199, 1751201,
	1751203, 1751207, 1751211, 1751213, 1751214, 1751215, 1751216, 1751220, 1751223, 1751225, 1751228, 1751231, 1751235, 1751237, 1751240, 1751243, 1751244, 1751245, 1751247, 1751249, 1751251, 1751252, 1751254, 1751255, 1751258, 1751260, 1751263, 1751264, 1751265, 1751266, 1751269, 1751272, 1751276, 1751277, 1751278, 1751281, 1751282, 1751283, 1751286, 1751289, 1751293, 1751296, 1751300, 1751302, 1751303, 1751307, 1751311, 1751314, 1751315, 1751317, 1751318, 1751321, 1751323, 1751324, 1751327, 1751328, 1751330, 1751333, 1751337, 1751340, 1751342, 1751343, 1751346, 1751348, 1751349, 1751350, 1751353, 1751357, 1751361, 1751365, 1751369, 1751370, 1751373, 1751377, 1751379, 1751383, 1751386, 1751387, 1751390, 1751391, 1751393, 1751397, 1751401, 1751405, 1751409, 1751412, 1751414, 1751418, 1751421, 1751422, 1751423, 1751424, 1751428, 1751430, 1751431, 1751433, 1751436, 1751438, 1751442, 1751445, 1751447, 1751449, 1751450, 1751454, 1751457, 1751458, 1751459, 1751460, 1751462, 1751464, 1751466, 1751469, 1751470, 1751474, 1751478, 1751480, 1751483, 1751485, 1751487, 1751489, 1751491, 1751492, 1751493, 1751494, 1751497, 1751500,
	1751501, 1751504, 1751507, 1751510, 1751513, 1751514, 1751517, 1751521, 1751524, 1751527, 1751531, 1751533, 1751534, 1751537, 1751540, 1751541, 1751545, 1751548, 1751551, 1751553, 1751556, 1751557, 1751560, 1751561, 1751563, 1751565, 1751568, 1751570, 1751574, 1751575, 1751578, 1751581, 1751585, 1751588, 1751590, 1751593, 1751594, 1751598, 1751602, 1751604, 1751607, 1751609, 1751612, 1751613, 1751616, 1751620, 1751621, 1751622, 1751623, 1751624, 1751626, 1751627, 1751631, 1751635, 1751636, 1751637, 1751638, 1751641, 1751644, 1751647, 1751648, 1751651, 1751653, 1751656, 1751657, 1751659, 1751661, 1751664, 1751666, 1751670, 1751671, 1751675, 1751679, 1751683, 1751685, 1751686, 1751690, 1751694, 1751698, 1751702, 1751707, 1751711, 1751712, 1751713, 1751714, 1751718, 1751720, 1751721, 1751724, 1751726, 1751727, 1751728, 1751730, 1751733, 1751735, 1751736, 1751737, 1751740, 1751741, 1751745, 1751746, 1751747, 1751751, 1751754, 1751758, 1751760, 1751763, 1751764, 1751768, 1751770, 1751772, 1751774, 1751778, 1751781, 1751782, 1751786, 1751789, 1751790, 1751793, 1751797, 1751799, 1751802, 1751805, 1751807, 1751808, 1751812,
	1751814, 1751818, 1751820, 1751821, 1751824, 1751849, 1751850, 1751851, 1751852, 1751853, 1751854, 1751855, 1751856, 1751857, 1751858, 1751859, 1751860, 1751861, 1751862, 1751863, 1751864, 1751865, 1751866, 1751867, 1751868, 1751869, 1751870, 1751872, 1751873, 1751874, 1751875, 1751876, 1751877, 1751878, 1751879, 1751880, 1751881, 1751882, 1751884, 1751885, 1751887, 1751888, 1751889, 1751890, 1751891, 1751892, 1751893, 1751894, 1751895, 1751896, 1751898, 1751899, 1751900, 1751902, 1751903, 1751904, 1751905, 1751906, 1751907, 1751908, 1751909, 1751910, 1751911, 1751912, 1751913, 1751915, 1751916, 1751917, 1751918, 1751920, 1751921, 1751922, 1751923, 1751924, 1751925, 1751926, 1751927, 1751928, 1751929, 1751930, 1751931, 1751932, 1751933, 1751934, 1751935, 1751937, 1751938, 1751939, 1751940, 1751941, 1751942, 1751943, 1751952, 1751954, 1751955, 1751956, 1751957, 1751958, 1751959, 1751960, 1751961, 1751962, 1751963, 1751964, 1751965, 1751966, 1751967, 1751968, 1751969, 1751970, 1751971, 1751972, 1751973, 1751974, 1751975, 1751977, 1751978, 1751979, 1751981, 1751982, 1751983, 1751984, 1751985, 1751986, 1751987, 1751988,
	1751989, 1751990, 1751991, 1751993, 1751994, 1751995, 1751996, 1751997, 1751998, 1751999, 1752000, 1752001, 1752003, 1752004, 1752005, 1752006, 1752008, 1752009, 1752010, 1752011, 1752012, 1752013, 1752015, 1752016, 1752018, 1752019, 1752020, 1752021, 1752022, 1752023, 1752024, 1752025, 1752026, 1752027, 1752028, 1752029, 1752030, 1752031, 1752032, 1752033, 1752034, 1752035, 1752036, 1752037, 1752038, 1752039, 1752040, 1752042, 1752043, 1752044, 1752045, 1752046, 1752047, 1752048, 1752049, 1752050, 1752051, 1752056, 1752057, 1752058, 1752059, 1752060, 1752061, 1752062, 1752063, 1752064, 1752065, 1752066, 1752068, 1752069, 1752070, 1752071, 1752072, 1752073, 1752074, 1752075, 1752077, 1752078, 1752079, 1752080, 1752081, 1752082, 1752083, 1752084, 1752086, 1752087, 1752089, 1752090, 1752091, 1752092, 1752094, 1752095, 1752096, 1752097, 1752098, 1752099, 1752100, 1752101, 1752102, 1752104, 1752105, 1752106, 1752107, 1752108, 1752110, 1752111, 1752112, 1752113, 1752114, 1752115, 1752116, 1752117, 1752118, 1752119, 1752121, 1752122, 1752123, 1752125, 1752126, 1752128, 1752129, 1752131, 1752132, 1752133, 1752134, 1752135,
	1752136, 1752137, 1752138, 1752140, 1752141, 1752142, 1752143, 1752144, 1752145, 1752147, 1752148, 1752149, 1752150, 1752151, 1752152, 1752153, 1752154, 1752155, 1752156, 1752160, 1752161, 1752162, 1752163, 1752164, 1752166, 1752167, 1752169, 1752170, 1752171, 1752172, 1752173, 1752174, 1752175, 1752176, 1752177, 1752178, 1752179, 1752180, 1752181, 1752182, 1752184, 1752185, 1752186, 1752188, 1752189, 1752190, 1752191, 1752192, 1752193, 1752194, 1752195, 1752196, 1752198, 1752199, 1752200, 1752201, 1752202, 1752204, 1752205, 1752206, 1752207, 1752208, 1752209, 1752211, 1752212, 1752213, 1752214, 1752215, 1752216, 1752217, 1752218, 1752219, 1752220, 1752222, 1752223, 1752224, 1752226, 1752227, 1752228, 1752229, 1752230, 1752231, 1752232, 1752233, 1752234, 1752235, 1752236, 1752237, 1752238, 1752239, 1752240, 1752241, 1752242, 1752244, 1752246, 1752247, 1752248, 1752249, 1752250, 1752251, 1752252, 1752254, 1752256, 1752257, 1752258, 1752259, 1752260, 1752261, 1752262, 1752263, 1752264, 1752266, 1752267, 1752268, 1752269, 1752270, 1752271, 1752273, 1752274, 1752275, 1752277, 1752278, 1752279, 1752280, 1752281, 1752283,
	1752284, 1752285, 1752286, 1752287, 1752288, 1752289, 1752290, 1752291, 1752292, 1752293, 1752294, 1752295, 1752297, 1752298, 1752299, 1752301, 1752302, 1752303, 1752304, 1752305, 1752306, 1752307, 1752308, 1752309, 1752310, 1752311, 1752312, 1752313, 1752314, 1752315, 1752316, 1752317, 1752318, 1752319, 1752320, 1752321, 1752322, 1752323, 1752324, 1752325, 1752326, 1752327, 1752334, 1752335, 1752336, 1752337, 1752338, 1752339, 1752340, 1752341, 1752342, 1752343, 1752344, 1752345, 1752346, 1752347, 1752349, 1752350, 1752351, 1752352, 1752353, 1752354, 1752355, 1752356, 1752357, 1752358, 1752359, 1752360, 1752361, 1752362, 1752363, 1752365, 1752366, 1752367, 1752368, 1752369, 1752370, 1752371, 1752372, 1752373, 1752374, 1752375, 1752376, 1752377, 1752378, 1752379, 1752381, 1752382, 1752383, 1752384, 1752385, 1752386, 1752387, 1752388, 1752390, 1752391, 1752392, 1752393, 1752394, 1752395, 1752397, 1752398, 1752399, 1752400, 1752401, 1752402, 1752404, 1752405, 1752406, 1752407, 1752408, 1752409, 1752411, 1752412, 1752413, 1752414, 1752415, 1752416, 1752417, 1752418, 1752419, 1752420, 1752421, 1752422, 1752423, 1752425,
	1752426, 1752427, 1752428, 1752429, 1752430, 1752431, 1752432, 1752433, 1752434, 1752435, 1752437, 1752438, 1752439, 1752440, 1752441, 1752442, 1752444, 1752445, 1752446, 1752447, 1752448, 1752449, 1752450, 1752451, 1752452, 1752453, 1752454, 1752455, 1752456, 1752457, 1752458, 1752459, 1752461, 1752462, 1752463, 1752464, 1752465, 1752466, 1752467, 1752468, 1752470, 1752471, 1752472, 1752473, 1752474, 1752475, 1752476, 1752477, 1752478, 1752479, 1752480, 1752481, 1752482, 1752483, 1752485, 1752486, 1752487, 1752489, 1752490, 1752491, 1752492, 1752493, 1752494, 1752495, 1752496, 1752497, 1752498, 1752499, 1752501, 1752502, 1752503, 1752504, 1752505, 1752506, 1752507, 1752508, 1752509, 1752510, 1752512, 1752513, 1752514, 1752515, 1752516, 1752517, 1752518, 1752519, 1752520, 1752521, 1752522, 1752523, 1752524, 1752525, 1752526, 1752527, 1752528, 1752529, 1752530, 1752531, 1752532, 1752533, 1752534, 1752535, 1752536, 1752537, 1752538, 1752539, 1752540, 1752541, 1752542, 1752543, 1752544, 1752545, 1752547, 1752548, 1752549, 1752550, 1752551, 1752552, 1752554, 1752555, 1752556, 1752557, 1752558, 1752559, 1752560, 1752561,
	1752562, 1752563, 1752564, 1752565, 1752566, 1752567, 1752568, 1752569, 1752571, 1752572, 1752574, 1752575, 1752577, 1752578, 1752580, 1752581, 1752583, 1752584, 1752585, 1752586, 1752587, 1752588, 1752589, 1752590, 1752591, 1752592, 1752593, 1752594, 1752595, 1752596, 1752597, 1752598, 1752599, 1752600, 1752601, 1752602, 1752603, 1752604, 1752605, 1752606, 1752608, 1752609, 1752610, 1752611, 1752612, 1752614, 1752616, 1752618, 1752619, 1752620, 1752621, 1752622, 1752624, 1752625, 1752626, 1752627, 1752628, 1752630, 1752631, 1752633, 1752634, 1752635, 1752636, 1752637, 1752638, 1752639, 1752640, 1752641, 1752642, 1752643, 1752644, 1752645, 1752646, 1752647, 1752649, 1752650, 1752651, 1752652, 1752654, 1752655, 1752657, 1752658, 1752659, 1752660, 1752661, 1752662, 1752663, 1752665, 1752667, 1752668, 1752670, 1752671, 1752672, 1752673, 1752674, 1752675, 1752676, 1752678, 1752679, 1752680, 1752682, 1752683, 1752684, 1752685, 1752686, 1752687, 1752688, 1752689, 1752690, 1752691, 1752692, 1752693, 1752694, 1752696, 1752697, 1752698, 1752700, 1752701, 1752702, 1752703, 1752705, 1752706, 1752707, 1752708, 1752709, 1752710,
	1752711, 1752713, 1752714, 1752715, 1752716, 1752717, 1752718, 1752719, 1752720, 1752722, 1752723, 1752724, 1752725, 1752726, 1752727, 1752728, 1752729, 1752730, 1752731, 1752732, 1752734, 1752735, 1752736, 1752737, 1752739, 1752740, 1752741, 1752742, 1752743, 1752744, 1752745, 1752746, 1752747, 1752748, 1752750, 1752751, 1752752, 1752753, 1752754, 1752756, 1752757, 1752758, 1752759, 1752760, 1752761, 1752762, 1752763, 1752764, 1752765, 1752766, 1752767, 1752768, 1752769, 1752771, 1752772, 1752774, 1752775, 1752776, 1752777, 1752778, 1752779, 1752780, 1752781, 1752783, 1752785, 1752786, 1752787, 1752788, 1752789, 1752790, 1752791, 1752792, 1752794, 1752795, 1752797, 1752798, 1752799, 1752800, 1752801, 1752802, 1752803, 1752804, 1752806, 1752807, 1752808, 1752809, 1752810, 1752811, 1752812, 1752813, 1752814, 1752816, 1752817, 1752818, 1752819, 1752820, 1752821, 1752822, 1752824, 1752825, 1752826, 1752827, 1752828, 1752829, 1752830, 1752831, 1752832, 1752833, 1752834, 1752836, 1752837, 1752838, 1752839, 1752840, 1752842, 1752843, 1752844, 1752845, 1752846, 1752847, 1752848, 1752849, 1752850, 1752851, 1752852, 1752853,
	1752854, 1752856, 1752858, 1752859, 1752860, 1752861, 1752862, 1752863, 1752864, 1752866, 1752867, 1752868, 1752869, 1752870, 1752871, 1752872, 1752873, 1752874, 1752875, 1752876, 1752878, 1752879, 1752880, 1752881, 1752882, 1752883, 1752884, 1752886, 1752887, 1752889, 1752890, 1752891, 1752892, 1752893, 1752894, 1752895, 1752896, 1752898, 1752899, 1752900, 1752901, 1752902, 1752903, 1752904, 1752905, 1752906, 1752908, 1752909, 1752910, 1752911, 1752912, 1752913, 1752915, 1752916, 1752917, 1752918, 1752919, 1752920, 1752921, 1752922, 1752923, 1752924, 1752925, 1752926, 1752927, 1752928, 1752929, 1752931, 1752932, 1752934, 1752935, 1752936, 1752937, 1752938, 1752939, 1752941, 1752942, 1752943, 1752944, 1752946, 1752947, 1752949, 1752950, 1752951, 1752952, 1752953, 1752954, 1752955, 1752956, 1752957, 1752958, 1752959, 1752961, 1752962, 1752963, 1752964, 1752965, 1752966, 1752968, 1752969, 1752970, 1752971, 1752972, 1752973, 1752974, 1752976, 1752977, 1752978, 1752980, 1752981, 1752982, 1752983, 1752984, 1752985, 1752986, 1752987, 1752988, 1752989, 1752990, 1752991, 1752992, 1752993, 1752994, 1752996, 1752997, 1752999,
	1753000, 1753001, 1753002, 1753003, 1753004, 1753005, 1753006, 1753007, 1753008, 1753009, 1753010, 1753011, 1753012, 1753013, 1753014, 1753015, 1753016, 1753017, 1753019, 1753020, 1753021, 1753022, 1753023, 1753024, 1753025, 1753027, 1753028, 1753029, 1753030, 1753031, 1753032, 1753033, 1753034, 1753035, 1753036, 1753037, 1753038, 1753039, 1753041, 1753042, 1753044, 1753045, 1753046, 1753047, 1753048, 1753049, 1753050, 1753051, 1753052, 1753053, 1753054, 1753055, 1753056, 1753057, 1753058, 1753059, 1753060, 1753061, 1753062, 1753063, 1753064, 1753065, 1753066, 1753067, 1753068, 1753069, 1753070, 1753071, 1753072, 1753073, 1753074, 1753075, 1753076, 1753077, 1753078, 1753079, 1753080, 1753081, 1753082, 1753083, 1753084, 1753085, 1753086, 1753088, 1753089, 1753090, 1753091, 1753092, 1753093, 1753094, 1753095, 1753096, 1753097, 1753098, 1753099, 1753100, 1753101, 1753102, 1753103, 1753104, 1753105, 1753106, 1753107, 1753108, 1753109, 1753111, 1753112, 1753113, 1753114, 1753115, 1753116, 1753118, 1753119, 1753121, 1753122, 1753124, 1753125, 1753126, 1753127, 1753128, 1753129, 1753130, 1753131, 1753132, 1753133, 1753134,
	1753135, 1753136, 1753137, 1753138, 1753139, 1753140, 1753141, 1753142, 1753143, 1753145, 1753146, 1753147, 1753148, 1753149, 1753151, 1753152, 1753153, 1753154, 1753155, 1753157, 1753158, 1753159, 1753160, 1753161, 1753162, 1753163, 1753164, 1753166, 1753168, 1753169, 1753170, 1753172, 1753173, 1753174, 1753175, 1753176, 1753177, 1753178, 1753179, 1753180, 1753181, 1753182, 1753183, 1753184, 1753185, 1753186, 1753187, 1753188, 1753189, 1753190, 1753191, 1753192, 1753193, 1753194, 1753195, 1753196, 1753197, 1753198, 1753200, 1753201, 1753202, 1753203, 1753204, 1753206, 1753207, 1753208, 1753209, 1753210, 1753211, 1753212, 1753213, 1753214, 1753215, 1753216, 1753218, 1753219, 1753220, 1753222, 1753223, 1753224, 1753225, 1753226, 1753228, 1753229, 1753230, 1753232, 1753233, 1753235, 1753236, 1753237, 1753238, 1753239, 1753240, 1753242, 1753243, 1753244, 1753245, 1753247, 1753248, 1753249, 1753250, 1753251, 1753252, 1753253, 1753254, 1753256, 1753257, 1753258, 1753259, 1753260, 1753261, 1753262, 1753263, 1753264, 1753265, 1753266, 1753268, 1753269, 1753270, 1753271, 1753272, 1753273, 1753274, 1753275, 1753276, 1753277,
	1753278, 1753279, 1753280, 1753281, 1753282, 1753283, 1753285, 1753286, 1753287, 1753288, 1753289, 1753290, 1753291, 1753292, 1753293, 1753294, 1753296, 1753297, 1753298, 1753299, 1753300, 1753301, 1753302, 1753303, 1753304, 1753305, 1753307, 1753308, 1753309, 1753310, 1753311, 1753312, 1753313, 1753315, 1753316, 1753317, 1753318, 1753319, 1753320, 1753321, 1753322, 1753323, 1753324, 1753325, 1753326, 1753327, 1753328, 1753329, 1753330, 1753331, 1753332, 1753333, 1753334, 1753335, 1753336, 1753337, 1753338, 1753339, 1753340, 1753341, 1753343, 1753344, 1753346, 1753347, 1753348, 1753349, 1753350, 1753351, 1753352, 1753354, 1753355, 1753356, 1753357, 1753358, 1753359, 1753360, 1753361, 1753362, 1753364, 1753365, 1753366, 1753367, 1753368, 1753369, 1753370, 1753371, 1753372, 1753373, 1753374, 1753376, 1753378, 1753379, 1753380, 1753381, 1753383, 1753384, 1753385, 1753386, 1753387, 1753388, 1753389, 1753390, 1753391, 1753392, 1753393, 1753394, 1756185, 1816730, 1826456, 1932742, 1937278, 1941206, 1949908, 1953905, 1955066, 1983135, 1983553, 1983836, 2056845, 2133217, 2180938, 2219302, 2227229, 2235985, 2237498, 2237517,
	2237581, 2241595, 2241630, 2287244, 2287962, 2289080, 2327671, 2341702, 2367087, 2384318, 2410281, 2410731, 2418276, 2418679, 2420028, 2422115, 2422966, 2425592, 2425711, 2434188, 2435732, 2435825, 2483330, 2483600, 2488524, 2488563, 2492283, 2501615, 2515072, 2515907, 2515970, 2517783, 2517851, 2520092, 2520334, 2521151, 2521259, 2521330, 2522647, 2528068, 2530044, 2546221, 2546399, 2546537, 2560874, 2564726, 2565230, 2592000, 2604178, 2604234, 2607228, 2618079, 2669068, 2670069, 2670119, 2695558, 2702176, 2704201, 2707686, 2735031, 2735095, 2763055, 2764924, 2771752, 2800274, 2814790, 2822513, 2828059, 2831932, 2832065, 2833609, 2833679, 2837026, 2837122, 2874472, 2874512, 2881971, 2882101, 2892292, 2893375, 2899333, 2899402, 2906825, 2910867, 2913826, 2925476, 2934437, 2934703, 2935034, 2935456, 2935556, 2936172, 2938577, 2944340, 2944673, 2947402, 2949305, 2962086, 2976361, 2976421, 2999083, 2999148, 3012211, 3013235, 3014166, 3015294, 3020545, 3020576, 3024135, 3028925, 3035396, 3075415, 3076630, 3078340, 3079784, 3080232, 3087088, 3087132, 3088738, 3097714, 3103331, 3109800, 3115502, 3121432, 3137521, 3137554,
	3143012, 3144660, 3152097, 3168195, 3191673, 3198731, 3203840, 3203973, 3205293, 3207322, 3208290, 3210435, 3210488, 3211505, 3218456, 3241792, 3241882, 3242213, 3242432, 3251441, 3262762, 3262943, 3276049, 3296800, 3300101, 3325256, 3331966, 3332182, 3333919, 3337768, 3345594, 3359804, 3360673, 3360732, 3361745, 3362229, 3388551, 3388877, 3424311, 3427857, 3444894, 3452620, 3455517, 3455629, 3458924, 3465921, 3467058, 3519801, 3520158, 3523566, 3525231, 3573647, 3582044, 3583883, 3596038, 3601148, 3608517, 3612018, 3616732, 3642813, 3668687, 3699213, 3707984, 3709138, 3715396, 3722495, 3732042, 3819209, 3824263, 3824436, 3832407, 3832537, 3832628, 3832769, 3832908, 3832980, 3840732, 3840789, 3841353, 3853073, 3864514, 3872679, 3872745, 3879948, 3890477, 3898181, 3898340, 3898702, 3908827, 3908902, 3920077, 3936902, 3945120, 3969616, 3971470, 3972728, 3972828, 3979594, 3990381, 3996039, 3996610, 4018512, 4026577, 4153734, 4153793, 4156338, 4281589, 4426040, 4447720, 4448397, 4484927, 4521057, 4538601, 4543589, 4557684, 4581303, 4592945, 4599713, 4671021, 4673620, 4673707, 4747331, 4771575, 4784274, 4964311, 5036968,
	5037010, 5043142, 5043267, 5065991, 5089964, 5111286, 5161610, 5161661, 5223690, 5223768, 5229412, 5322503, 5322561, 5389211, 5401603, 5411818, 5465059, 5471589, 5491516, 5615929, 5738686, 5738716, 5767293, 5905296, 5905393, 5924867, 6013595, 6016290, 6026365, 6158041, 6320650, 6340975, 6378183, 6378199, 6422089, 6435187, 6458262, 6489576, 6526762, 6547317, 6548193, 6552130, 6552140, 6571802, 6805359, 6805585, 6805653, 6937907, 7064486, 7082873, 7193441, 7377267, 7412391, 7412476, 7567161, 7576170, 7576254, 7609640, 7697792, 7755012, 7755263, 7831203, 7835660, 7843290, 7849463, 7849528, 7849684, 7877512, 7920422, 7942480, 7953018, 7964619, 7964774, 8101742, 8173912, 8213000, 8219224, 8230357, 8331965, 8381631, 8443391, 8446821, 8467106, 8528284, 8553834, 8573783, 8573799, 8573824, 8618856, 8631720, 8645864, 8875371, 8961761, 8983048, 8983065, 9044188, 9211750, 9300515, 9352813, 9364712, 9366937, 9485955, 10046897, 10063073, 10087763, 10193370, 10219590, 10219822, 10220958, 10274622, 10381954, 10382949, 10384823, 10409862, 10472707, 10481238, 10489476, 10489478, 10490526, 10500143, 10501050, 10501105, 10503708,
	10523146, 10523191, 10668565, 10703898, 10820055, 10840641, 10859474, 10862299, 10876660, 10876696, 10894136, 10894453, 10913458, 10913502, 10915046, 10915065, 10956524, 10981038, 10981202, 11055241, 11055244, 11065058, 11107651, 11139319, 11141049, 11157442, 11167495, 11204804, 11205664, 11216512, 11216607, 11220305, 11235901, 11240340, 11245590, 11247515, 11269050, 11360977, 11378220, 11443900, 11483244, 11535941, 11622272, 11638175, 11638210, 11670682, 11679091, 11726181, 11734812, 11772770, 11829000, 11836481, 11836991, 11838251, 11838818, 11862464, 11875319, 11910230, 11913180, 12064371, 12091691, 12092189, 12163888, 12168489, 12171630, 12175050, 12175086, 12175099, 12175109, 12232377, 12265686, 12368964, 12379905, 12382979, 12388770, 12432748, 12451460, 12451503, 12456459, 12461874, 12472855, 12501295, 12505676, 12520531, 12520568, 12520589, 12520627, 12520658, 12520821, 12521615, 12521627, 12521650, 12521677, 12521692, 12521724, 12521832, 12521847, 12521881, 12521918, 12590080, 12632988, 12660657, 12664478, 12679957, 12680007, 12682602, 12685215, 12685280, 12685447, 12689454, 12707320, 12715914,
	12744092, 12786667, 12793399, 12793420, 12793433, 12793452, 12793490, 12793864, 12835476, 12862983, 12904655, 12935205, 12954395, 12976349, 12988740, 12989271, 12994027, 12994679, 12994838, 12994958, 12995026, 12995040, 12995051, 12995361, 12996153, 12996740, 12996835, 12996929, 12997402, 12997487, 12998412, 12998597, 13000836, 13002658, 13002746, 13004039, 13004238, 13005310, 13005332, 13006632, 13007038, 13007060, 13024435, 13024609, 13024675, 13024736, 13025045, 13025951, 13025976, 13032746, 13032971, 13033045, 13033177, 13033223, 13038335, 13042333, 13105942, 13105981, 13106013, 13106038, 13106105, 13106137, 13106252, 13126537, 13145248, 13187752, 13240945, 13248697, 13248762, 13254235, 13255134, 13278154, 13301244, 13430847, 13671303, 14245988, 14246080, 14338391, 14399274, 14491691, 14619239, 14741353, 14777739, 14779356, 14971214, 15935991, 16200360, 16350550, 16397966, 16408752, 16563750, 16720737, 16766237, 16787806, 16884311, 16891112, 16900382, 16900642, 16915877, 16915957, 16916108, 16916592, 16916659, 16918884, 16919286, 16923793, 16933698, 16937547, 16938904, 16943947, 16949388, 16965699,
	16981647, 16990009, 17003347, 17019838, 17023447, 17028280, 17028341, 17051355, 17140531, 17140781, 17158131, 17158995, 17175291, 17184672, 17190158, 17199924, 17199931, 17199940, 17199943, 17200051, 17200063, 17212084, 17212097, 17215416, 17216562, 17219598, 17220416, 17223986, 17225813, 17229357, 17242217, 17256141, 17289586, 17289675, 17289728, 17289743, 17289751, 17290096, 17298237, 17298263, 17298398, 17316341, 17371517, 17422548, 17422655, 17422680, 17446093, 17457455, 17457464, 17457487, 17471094, 17473093, 17489782, 17549255, 17549343, 17597571, 17614775, 17622723, 17626431, 17648858, 17650760, 17673710, 17788101, 17792541, 17793146, 17795413, 17883038, 17933092, 17933160, 17951406, 18024850, 18025015, 18090805, 18098999, 18111182, 18111197, 18111208, 18111214, 18111266, 18111282, 18121937, 18127685, 18313255, 18316246, 18473239, 18486449, 18527911, 18718715, 18736121, 18770779, 18898504, 19146948, 19248409, 19253146, 19289700, 19308329, 19316374, 19833759, 20097598, 20950026, 21002514, 21053997, 21054175, 21061120, 21062957, 21073503, 21110510, 21110654, 21114737, 21134289, 21145090, 21165520,
	21165617, 21204160, 21251518, 21255709, 21257574, 21280423, 21293169, 21304617, 21308405, 21310620, 21310638, 21310903, 21311708, 21313569, 21317914, 21319242, 21319268, 21320490, 21342513, 21344327, 21348293, 21349763, 21355028, 21423397, 21433791, 21517929, 21517993, 21534051, 21534164, 21683823, 21683977, 21701315, 21701485, 21707713, 21712264, 21712509, 21732731, 21773437, 21831511, 21835278, 21899500, 21957539, 21959032, 22024894, 22336760, 22364007, 22423806, 22504728, 22538695, 22547173, 22552334, 22582566, 22605397, 22605443, 22670156, 22724483, 22739583, 22837548, 22925623, 22925671, 22925702, 22925747, 22925805, 22925827, 22926147, 22926167, 22926174, 22926321, 23005792, 23104791, 23428719, 23764296, 23852216, 24017912, 24031033, 24059708, 24099690, 24186375, 24222030, 24235740, 24540225, 24862092, 24862127, 25406437, 25437153, 25438583, 25447998, 25863028, 25863423, 25907193, 25939203, 26282995, 26287069, 26303720, 26303740, 26315483, 26315544, 26323351, 26349628, 26430516, 26746892, 27001727, 27050744, 27055584, 27063401, 27071769, 27262892, 27268039, 27268065, 27572682, 27572710, 27607898,
	27642078, 27642124, 27642179, 28011228, 28053302, 28204380, 28204424, 28341669, 28452594, 28493686, 28502697, 28556618, 28760561, 28760563, 28761636, 28761834, 28762023, 28762129, 28763176, 28763471, 28765183, 28765483, 28765643, 28765757, 28765886, 28766098, 28766198, 28766200, 28799471, 28799499, 28799670, 28800061, 28800540, 28800607, 28800623, 28800803, 28802661, 28809149, 28813022, 28813077, 28814123, 28814291, 28816522, 28816566, 28820521, 28821364, 28822229, 28863707, 28864953, 28913598, 28913644, 28913687, 28914377, 28915107, 28915353, 28915474, 28915484, 28918557, 28918591, 28918624, 28918649, 28918683, 28928205, 28928300, 28945711, 28948842, 28949172, 28963628, 29025282, 29057633, 29057655, 29058209, 29064436, 29064876, 29065063, 29065119, 29065169, 29065351, 29065668, 29067131, 29067999, 29068087, 29068391, 29068897, 29068898, 29068966, 29068980, 29068992, 29069081, 29069130, 29069142, 29069143, 29069145, 29069188, 29069207, 29069238, 29069308, 29069358, 29069376, 29069443, 29069452, 29069453, 29069559, 29069605, 29069697, 29069819, 29069855, 29069869, 29069938, 29069992, 29070021, 29070216,
	29070253, 29070307, 29070368, 29070513, 29070557, 29070577, 29070597, 29070624, 29070639, 29070643, 29070664, 29070676, 29070685, 29070690, 29070700, 29070702, 29070719, 29070730, 29070746, 29070803, 29070830, 29070861, 29070928, 29071216, 29071300, 29071311, 29071357, 29071401, 29071607, 29071692, 29072052, 29072115, 29072424, 29072519, 29072709, 29072873, 29073452, 29073495, 29073721, 29073802, 29073903, 29074242, 29076203, 29076253, 29076575, 29077125, 29077718, 29077746, 29077947, 29078087, 29078298, 29078299, 29078380, 29079872, 29080004, 29080269, 29080391, 29080444, 29080574, 29081064, 29081175, 29081335, 29081535, 29081555, 29082070, 29082124, 29082147, 29082353, 29082378, 29082418, 29082533, 29082550, 29082598, 29082648, 29082694, 29082740, 29082841, 29082912, 29082983, 29083069, 29083111, 29083122, 29083135, 29083148, 29083244, 29083328, 29083378, 29083460, 29083502, 29083554, 29083608, 29083904, 29084539, 29084684, 29085179, 29085641, 29085661, 29085806, 29085878, 29085885, 29085960, 29086056, 29086143, 29086288, 29086513, 29086699, 29086872, 29087148, 29087258, 29087269, 29087349, 29087396,
	29087700, 29087729, 29087940, 29087974, 29087986, 29088064, 29088298, 29088570, 29088603, 29089317, 29089524, 29089654, 29089918, 29090184, 29090343, 29090742, 29090879, 29090999, 29091326, 29091367, 29091647, 29092194, 29092600, 29093109, 29093377, 29093772, 29094482, 29094606, 29094669, 29094740, 29094779, 29094875, 29095097, 29095288, 29095605, 29096041, 29096737, 29097637, 29097745, 29098596, 29098955, 29099826, 29100482, 29105397, 29105830, 29107644, 29108167, 29109118, 29110391, 29110871, 29110877, 29111108, 29111293, 29111985, 29112032, 29112266, 29112681, 29112862, 29112885, 29112955, 29113261, 29113424, 29113581, 29115943, 29116135, 29116707, 29116813, 29116898, 29117261, 29117318, 29117386, 29117441, 29117802, 29117839, 29117876, 29117905, 29118023, 29118265, 29118466, 29118907, 29118938, 29118962, 29119934, 29120307, 29120363, 29122609, 29124142, 29124478, 29125002, 29125178, 29126051, 29126453, 29126652, 29126698, 29126744, 29128351, 29128595, 29128692, 29130347, 29130450, 29131001, 29131169, 29131366, 29131409, 29131685, 29132119, 29132550, 29132588, 29133327, 29133390, 29133493, 29133568,
	29133572, 29133904, 29134040, 29134542, 29135568, 29139418, 29140023, 29140588, 29141959, 29142519, 29142663, 29142980, 29143443, 29143710, 29144339, 29144933, 29145223, 29145949, 29151839, 29152300, 29152400, 29160109, 29162051, 29162275, 29162579, 29166932, 29167160, 29167601, 29169470, 29169804, 29170048, 29170267, 29170374, 29170398, 29172063, 29172621, 29173459, 29173702, 29173830, 29173901, 29174113, 29174255, 29174259, 29174292, 29174477, 29174936, 29175092, 29175160, 29175366, 29175756, 29175830, 29177174, 29177870, 29178085, 29178226, 29178649, 29186363, 29187521, 29193043, 29197223, 29199896, 29200226, 29202931, 29203386, 29204654, 29213021, 29214678, 29214819, 29215083, 29215193, 29216356, 29220322, 29220458, 29224383, 29229779, 29230046, 29230406, 29230646, 29230996, 29231373, 29231423, 29231643, 29231747, 29232041, 29233042, 29233230, 29233251, 29233574, 29238190, 29252950, 29255251, 29257386, 29257789, 29258064, 29258140, 29258487, 29258737, 29264221, 29266127, 29273696, 29273867, 29277435, 29277491, 29277923, 29287681, 29287985, 29306684, 29308022, 29308907, 29311469, 29315728, 29327786,
	29330273, 29330836, 29331566, 29331678, 29331989, 29332139, 29332322, 29332468, 29350797, 29355158, 29355375, 29357186, 29358033, 29363827, 29363955, 29378324, 29378833, 29379078, 29381774, 29382639, 29393938, 29404004, 29404036, 29409831, 29410291, 29425999, 29430663, 29432629, 29432800, 29440073, 29442208, 29442314, 29449484, 29476880, 29477149, 29478930, 29483355, 29503974, 29520610, 29520915, 29520933, 29521072, 29521085, 29521103, 29524339, 29526205, 29526923, 29527075, 29528405, 29529199, 29529637, 29529874, 29531600, 29531960, 29532433, 29533697, 29534380, 29534739, 29535094, 29535775, 29535871, 29538291, 29538341, 29538463, 29538988, 29543502, 29543697, 29543925, 29547705, 29547835, 29547874, 29547922, 29548333, 29548983, 29551807, 29552151, 29552945, 29553475, 29553865, 29566995, 29571097, 29573288, 29577699, 29578346, 29578792, 29579702, 29580240, 29583092, 29585004, 29585471, 29586285, 29587099, 29587819, 29593551, 29598002, 29599203, 29600560, 29609818, 29619464, 29620979, 29632124, 29637298, 29637973, 29652150, 29652257, 29655084, 29664107, 29676440, 29687628, 29700804, 29700855, 29700928,
	29704809, 29728505, 29728533, 29728617, 29733046, 29737425, 29772524, 29772744, 29779294, 29779342, 29785488, 29828607, 29845687, 29846788, 29860879, 29889902, 29889968, 29922502, 29941017, 29951198, 29956449, 29965664, 29966919, 29985702, 29991763, 29993533, 29993727, 29994225, 29996001, 30004452, 30005765, 30029434, 30031641, 30039710, 30067978, 30068053, 30070325, 30070556, 30070620, 30089470, 30090988, 30100108, 30100418, 30101334, 30102557, 30111477, 30111584, 30111725, 30111792, 30112161, 30112235, 30118756, 30118983, 30119062, 30119184, 30119375, 30121342, 30124904, 30125906, 30127723, 30141064, 30149519, 30153370, 30155149, 30165576, 30173928, 30180010, 30205934, 30206165, 30259933, 30262134, 30262539, 30262999, 30267309, 30275369, 30297485, 30302870, 30305009, 30325129, 30325492, 30325587, 30325650, 30332167, 30338764, 30370373, 30393338, 30409592, 30420177, 30432837, 30465601, 30480111, 30497276, 30502283, 30507600, 30511797, 30513375, 30557853, 30647451, 30647483, 30647530, 30647552, 30653294, 31008315, 31021340, 31028010, 31037822, 31048437, 31056862, 31057241, 31104890, 31105209, 31105469,
	31106206, 31106377, 31106614, 31106982, 31107115, 31108109, 31108140, 31111847, 31113598, 31114569, 31124471, 31131293, 31131358, 31132143, 31132405, 31134789, 31136861, 31138823, 31144528, 31145100, 31145213, 31147894, 31147925, 31150704, 31151368, 31155803, 31156840, 31160248, 31165517, 31165589, 31181209, 31182173, 31182458, 31202528, 31207287, 31224280, 31224498, 31224691, 31224820, 31225186, 31227444, 31229020, 31229152, 31229420, 31230367, 31230813, 31249928, 31279661, 31280001, 31280395, 31286972, 31310407, 31313242, 31322111, 31369695, 31369969, 31372710, 31383155, 31455114, 31459088, 31534441, 31534518, 31538459, 31544879, 31553946, 31553989, 31554023, 31554042, 31584249, 31669116, 31672289, 31699356, 31704098, 31730962, 31772259, 31778475, 31791667, 31791737, 31814971, 31821429, 31821826, 31822070, 31823010, 31860012, 31865287, 31894740, 31909470, 31941760, 31984156, 32060935, 32084580, 32127082, 32174412, 32174983, 32325413, 32331687, 32439741, 32519596, 32564519, 32566468, 32569565, 32573117, 32575186, 32672654, 32681812, 32698240, 32698297, 32698523, 32707293, 32712244, 32713478, 32722994,
	32724542, 32733401, 32740799, 32773233, 32776377, 32776454, 32792664, 32796313, 32904876, 32934573, 32937226, 32937282, 32937359, 32937398, 32940185, 32946768, 32962236, 32978510, 32980460, 33002138, 33065743, 33065846, 33157485, 33282649, 33351235, 33351408, 33358055, 33372251, 33388845, 33576508, 33576530, 33576589, 33576880, 33576895, 33619388, 33619556, 33620303, 33620625, 33651969, 33707417, 33714355, 33714661, 33747736, 33755770, 33827294, 33853769, 33967437, 34013421, 34014837, 34018951, 34055267, 34062845, 34225678, 34424105, 34481042, 34585796, 34634442, 34660448, 34666902, 34684548, 34684711, 34684756, 35013094, 35117307, 35126358, 35129066, 35185806, 35194585, 35204063, 35234558, 35234694, 35234758, 35235088, 35237094, 35264950, 35267413, 35270906, 35311432, 35321502, 35321651, 35322065, 35369319, 35369479, 35410389, 35410645, 35470960, 35471430, 35471584, 35492443, 35553559, 35561770, 35622491, 35707078, 35709062, 35709556, 35710388, 35758301, 35766996, 35800086, 35810666, 35836943, 35837297, 35837356, 35837436, 35842457, 35850321, 35892300, 35937499, 35957783, 36042422, 36160887, 36163091,
	36164962, 36334834, 36370337, 36370496, 36382402, 36382454, 36417513, 36585002, 36639041, 36653942, 36668889, 36681606, 36693923, 36721612, 36721698, 36722499, 36907682, 37150350, 37223698, 37291133, 37302309, 37341160, 37401329, 37978270, 37980363, 38021204, 38119808, 38230397, 38345608, 38350010, 38350755, 38490953, 38683669, 39140718, 39143855, 39170859, 39253091, 39266111, 39294014, 39403998, 39441399, 39496414, 39498620, 39498645, 39561060, 39644402, 39676908, 39747769, 39784271, 39865137, 39945723, 39957046, 39957278, 39975358, 40049389, 40097582, 40135763, 40189637, 40195814, 40540421, 40571514, 40572523, 40575804, 40577690, 40612171, 40816680, 41181971, 41225296, 41693898, 41694550, 41817058, 42014363, 42232266, 43071076, 43657401, 43940691, 43997572, 44212511, 44286172, 44932794, 44995435, 44996343, 45485508, 45630156, 45746733, 46256241, 46256411, 46436484, 46440241, 46493125, 46493142, 46922909, 46961159, 46964121, 46966744, 46967196, 47504082, 47507520, 47507661, 47511393, 47519933, 49470464, 50444032, 52605168, 52605385, 52683181, 52684005, 52684776, 52705385, 52705466, 52910234, 52910686,
	52911367, 52917353, 52970584, 52980519, 52980567, 53437223, 53440872, 53441785, 53441862, 53442545, 53442787, 53442879, 53442907, 53443855, 53444159, 53444575, 53445014, 53445457, 53446184, 53492622, 53494257, 53505892, 53506193, 53506292, 53506573, 53513671, 53734216, 54122759, 54128976, 54132374, 54133213, 54249230, 54249482, 54263367, 54264083, 54278089, 54468312, 54486224, 54707408, 55643511, 55963286, 55963448, 56159371, 57327128, 57327371, 57328551, 57328580, 57629803, 57708245, 57744101, 57744221, 57986408, 58212435, 58415549, 58474495, 58476674, 58477420, 58482582, 58494701, 58495594, 58884606, 59595558, 60800143, 62481766, 63021485, 63032116, 63084763, 63085201, 63085250, 63085321, 63106642, 63178451, 63218756, 63235783, 63236192, 63506626, 63507607, 63509143, 63512496, 63512520, 63512580, 63512900, 63694446, 63748283, 63750955, 63751472, 63753182, 64212785, 64225403, 64273496, 64311773, 64323868, 64449676, 64591999, 65965763, 66030546, 66030602, 66031650, 66260197, 66689952, 67154117, 67674000, 69091320,
}
var maxBlockNoChecked = uint64(70180000)

var chaindataDbName = "chaindata"
var snapshotDbName = "snapshot"
var backupDbName = "chaindata.bk"

var chaindataFullFilename = chaindataDbName
var snapshotFullFilename = snapshotDbName
var backupFullFilename = backupDbName

var (
	snapshotCommand = cli.Command{
		Name:   "snapshot",
		Usage:  "Make blockchain snapshot",
		Action: utils.MigrateFlags(snapshot),
		Flags: []cli.Flag{
			utils.DataDirFlag,
			utils.ChainIdFlag,
		},
		Category: "CHAIN/DATA COMMANDS",
		Description: `
Make a snapshot of one chain.
the snapshot will contain the latest block, the latest state of this chain;
transactions/receipts will not be contained. 
the tx3/tx4/epoch information will keep the same.
This command is to reduce the data-size of one chain to the minimum,
it will be helpful when one node just wants to run with minimum size
with no need for history data. this could extremely save validator's disk.`,
	}
)

func snapshot(ctx *cli.Context) error {

	//make the log only output the error
	log.Root().SetHandler(log.LvlFilterHandler(log.LvlError, log.StreamHandler(os.Stderr, log.TerminalFormat(false))))
	ctx.GlobalSet("verbosity", "1") //0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail

	if ctx == nil {
		log.Errorf("ctx is null, pchain does not work")
		return nil
	}

	chainId := ctx.GlobalString(utils.ChainIdFlag.Name)
	fmt.Printf("loading chain: %v\n", chainId)

	pchain := (*chain.Chain)(nil)
	if params.IsMainChain(chainId) {
		pchain = chain.LoadMainChain(ctx, chainId)
	} else {
		pchain = chain.LoadChildChain(ctx, chainId)
	}
	if pchain == nil {
		log.Errorf("Load Chain '%s' failed.", chainId)
		return nil
	}
	fmt.Printf("done.\n")

	var ethereum *eth.Ethereum
	pchain.EthNode.ServiceNoRunning(&ethereum)
	if ethereum == nil {
		log.Errorf("snapshot(), ethereum is nil")
		return errors.New("ethereum is nil")
	}

	chain := ethereum.BlockChain()
	curBlock := chain.CurrentBlock().NumberU64()
	if curBlock == uint64(0) {
		fmt.Printf("only one block, no need do snapshot\n")
		os.Exit(0)
	}

	if !continueWork(curBlock) {
		os.Exit(0)
	}

	if err := doSnapshot(ctx, chainId, chain); err != nil {
		return err
	}

	return nil
}

func doSnapshot(ctx *cli.Context, chainId string, chain *core.BlockChain) error {

	dstDiskDb, dstStateDb, err := prepareDestinationDb(ctx, chainId)
	if err != nil {
		log.Errorf("err :%v", err)
		return err
	}

	//1. copy the start-block and end-block of all epoch
	fmt.Printf("start copying epoch blocks... ")
	if err := copyEpochEndpointBlock(ctx, chain, dstDiskDb); err != nil {
		log.Errorf("err :%v", err)
		return err
	}
	fmt.Println("done.")

	//2. copy the lastest block
	fmt.Println("start copying blocks which contain Dicc(deposit_in_child_chain) txs")
	if err := copyBlocksWithDiccTxs(ctx, chain, dstDiskDb); err != nil {
		log.Errorf("err :%v", err)
		return err
	}
	fmt.Println("done.")

	//3. copy the lastest block
	fmt.Println("start copying last 2 blocks")
	if err := copyLastTwoBlocks(ctx, chain, dstDiskDb); err != nil {
		log.Errorf("err :%v", err)
		return err
	}
	fmt.Println("done.")

	//4. copy out_of_storage rewards
	fmt.Println("start copying out of storage rewards")
	if err := copyOutOfStorage(ctx, chain, dstDiskDb); err != nil {
		log.Errorf("err :%v", err)
		return err
	}
	fmt.Println("done.")

	//5. copy preimages which map hash to address
	fmt.Printf("start copying preimages... ")
	if err := copyPreimage(ctx, chain, dstDiskDb); err != nil {
		log.Errorf("err :%v", err)
		return err
	}
	fmt.Println("done.")

	//6. copy diverse properties
	fmt.Println("start copying diverse properties")
	if err := copyDiverseProperties(ctx, chain, dstDiskDb); err != nil {
		log.Errorf("err :%v", err)
		return err
	}
	fmt.Println("done.")

	//7. copy the lastest state
	//to snap the state, close source diskdb and reload root to make snapshot
	stateDb, _ := chain.State()
	srcDiskDb := stateDb.Database().TrieDB().DiskDB().(ethdb.Database)
	srcDiskDb.Close()

	fmt.Printf("start copying last state... ")
	if err := copyLastState(ctx, chainId, chain.CurrentBlock().Root(), dstDiskDb, dstStateDb); err != nil {
		log.Errorf("err :%v", err)
		return err
	}
	fmt.Println("done.")

	//backup old db and move snapshot db as current db
	dstDiskDb.Close()

	//8. finally, backup original data and turn snapshot on
	fmt.Println("start backup and replace database directory")
	if err := switchDirectory(ctx, chainId); err != nil {
		log.Errorf("err :%v", err)
		return err
	}
	fmt.Println("done.")
	fmt.Println("")

	fmt.Printf("now the new snapshoted database is under %v,\n"+
		"the old database before snapshot is backuped under %v,\n"+
		"make sure the snapshoted database do work before deleting old database,\n"+
		"enjoy the new journey!\n",
		chaindataFullFilename,
		backupFullFilename)

	return nil
}

//copy start-block and end-block(headers) of each epoch, not include the state
func copyEpochEndpointBlock(ctx *cli.Context, bc *core.BlockChain, dstDiskDb ethdb.Database) error {

	tdm := bc.Engine().(consensus.Tendermint)
	currentEpoch := tdm.GetEpoch()

	epochCount := 0
	backLen := 0
	content := fmt.Sprintf("%v epochs copied", epochCount)
	replacePrint(backLen, content)
	backLen = len(content)

	epoch := currentEpoch
	curBlock := bc.CurrentBlock().NumberU64()
	for epoch != nil {

		if epoch.StartBlock > curBlock {
			epoch = epoch.GetPreviousEpoch()
			continue
		}

		if epoch.EndBlock <= curBlock {
			copyCommonBlock(ctx, epoch.EndBlock, bc, dstDiskDb)
		}

		copyCommonBlock(ctx, epoch.StartBlock, bc, dstDiskDb)

		epoch = epoch.GetPreviousEpoch()
		epochCount++
		content = fmt.Sprintf("%v epochs copied", epochCount)
		replacePrint(backLen, content)
		backLen = len(content)

		giveABreak()
	}

	fmt.Println("")

	return nil
}

//copy previous block(headers), not include the state
func copyCommonBlock(ctx *cli.Context, number uint64, bc *core.BlockChain, dstDiskDb ethdb.Database) error {

	//1. write block
	block := bc.GetBlockByNumber(number)
	td := bc.GetTd(block.Hash(), number)
	if td == nil {
		return consensus.ErrUnknownAncestor
	}

	hash := block.Hash()
	rawdb.WriteTd(dstDiskDb, hash, number, td)
	rawdb.WriteBlock(dstDiskDb, block)
	rawdb.WriteReceipts(dstDiskDb, hash, number, nil)
	rawdb.WriteCanonicalHash(dstDiskDb, hash, number)
	//rawdb.WriteHeadBlockHash(dstDiskDb, block.Hash())
	//rawdb.WriteHeadHeaderHash(dstDiskDb, block.Hash())

	if number == uint64(0) { //for first epoch's start block
		srcStateDb, err := bc.State()
		if err != nil {
			return err
		}
		//configPrefix   = []byte("ethereum-config-") // config prefix for the db
		srcDiskDb := srcStateDb.Database().TrieDB().DiskDB().(ethdb.Database)
		stored := rawdb.ReadCanonicalHash(srcDiskDb, number)
		storedCfg := rawdb.ReadChainConfig(srcDiskDb, stored)
		rawdb.WriteChainConfig(dstDiskDb, block.Hash(), storedCfg)
	}

	return nil
}

//copy blocks which contain Dicc(deposit_in_child_chain) txs, not include the state
func copyBlocksWithDiccTxs(ctx *cli.Context, bc *core.BlockChain, dstDiskDb ethdb.Database) error {

	chainId := bc.Config().PChainId
	if !params.IsMainChain(chainId) {
		fmt.Println("this chain is not main chain, need do nothing")
		return nil
	}

	recordToFile(fmt.Sprintf("\nrecord dicc blocks for %s:\n", bc.Config().PChainId))

	diccBlockCount := 0
	lineLength := 0
	backLen := 0
	content := fmt.Sprintf("%v blocks checked and %v blocks have Dicc txs and been copied", 0, diccBlockCount)
	replacePrint(backLen, content)
	backLen = len(content)

	//in normal, block #0 should have been copied when copy epoch endpoint blocks, so start with block #1.
	bn := uint64(1)
	//and for "pchain", if there is cached block numbers, just copy them and start with the next unchecked block
	if chainId == params.MainnetChainConfig.PChainId {
		for _, blockNo := range BlockWithDiccArray {
			if err := copyCommonBlock(ctx, blockNo, bc, dstDiskDb); err != nil {
				return err
			}
			rawdb.WriteTxLookupEntries(dstDiskDb, bc.GetBlockByNumber(blockNo))
			blockStr := fmt.Sprintf("%v,", blockNo)
			recordToFile(blockStr)
			lineLength += len(blockStr)
			if lineLength >= 1001 {
				recordToFile("\n")
				lineLength = 0
			}
			diccBlockCount++

			content = fmt.Sprintf("%v blocks checked and %v blocks have Dicc txs and been copied", blockNo, diccBlockCount)
			replacePrint(backLen, content)
			backLen = len(content)

			giveABreak()
		}
		bn = maxBlockNoChecked + 1
	}

	//the last 2 blocks will be copied anyway, so end with latestBlockNumber-2
	for ; bn < bc.CurrentBlock().NumberU64()-1; bn++ {
		block := bc.GetBlockByNumber(bn)
		if block != nil {
			txs := block.Transactions()
			shouldSave := false
			for _, tx := range txs {
				if pabi.IsPChainContractAddr(tx.To()) {
					data := tx.Data()
					function, err := pabi.FunctionTypeFromId(data[:4])
					if err != nil {
						continue
					}
					if function == pabi.DepositInMainChain {
						shouldSave = true
						break
					}
				}
			}

			if shouldSave {
				if err := copyCommonBlock(ctx, bn, bc, dstDiskDb); err != nil {
					return err
				}
				rawdb.WriteTxLookupEntries(dstDiskDb, block)
				blockStr := fmt.Sprintf("%v,", bn)
				recordToFile(blockStr)
				lineLength += len(blockStr)
				if lineLength >= 1001 {
					recordToFile("\n")
					lineLength = 0
				}
				diccBlockCount++
			}
		}

		content = fmt.Sprintf("%v blocks checked and %v blocks have Dicc txs and been copied", bn, diccBlockCount)
		replacePrint(backLen, content)
		backLen = len(content)

		giveABreak()
	}

	return nil
}

//copy last 2 blocks(headers/tx/receips, not include the state
func copyLastTwoBlocks(ctx *cli.Context, bc *core.BlockChain, dstDiskDb ethdb.Database) error {

	//copy 2nd last block
	block := bc.CurrentBlock()
	blockNumber := block.NumberU64()
	if err := copyCommonBlock(ctx, blockNumber-1, bc, dstDiskDb); err != nil {
		return err
	}

	//copy last block
	ptd := bc.GetTd(block.ParentHash(), blockNumber-1)
	if ptd == nil {
		return consensus.ErrUnknownAncestor
	}
	if err := copyLastBlock(ctx, ptd, block, dstDiskDb); err != nil {
		return err
	}
	return nil
}

//copy last block(headers/tx/receips, not include the state
func copyLastBlock(ctx *cli.Context, ptd *big.Int, block *types.Block, dstDiskDb ethdb.Database) error {

	externTd := new(big.Int).Add(block.Difficulty(), ptd)

	rawdb.WriteTd(dstDiskDb, block.Hash(), block.NumberU64(), externTd)
	rawdb.WriteBlock(dstDiskDb, block)
	rawdb.WriteCanonicalHash(dstDiskDb, block.Hash(), block.NumberU64())
	//TODO
	//rawdb.WriteReceipts(batch, block.Hash(), block.NumberU64(), receipts)
	rawdb.WriteHeadBlockHash(dstDiskDb, block.Hash())
	rawdb.WriteHeadHeaderHash(dstDiskDb, block.Header().Hash())
	rawdb.WriteHeadFastBlockHash(dstDiskDb, block.Hash())

	//TODO
	//rawdb.WriteTxLookupEntries(batch, block) //!! txes in latest block also needed to snapshot

	return nil
}

func copyOutOfStorage(ctx *cli.Context, bc *core.BlockChain, dstDiskDb ethdb.Database) error {

	srcDiskDb, _, err := prepareSourceDb(ctx, bc)
	if err != nil {
		return err
	}

	//RewardPrefix = []byte("w") // rewardPrefix + address + num (uint64 big endian) -> reward value
	it0 := srcDiskDb.NewIteratorWithPrefix(common.RewardPrefix)
	for it0.Next() {
		if len(it0.Key()) < len(common.RewardPrefix)+common.AddressLength+common.Uint64Len {
			return errors.New("RewardExtractPrefix key length is shorter than 29, no address included")
		}
		if err := dstDiskDb.Put(it0.Key(), it0.Value()); err != nil {
			return err
		}
	}
	it0.Release()

	//RewardExtractPrefix = []byte("extrRwd-epoch-") // rewardExtractPrefix + address -> rewardExtract value
	it1 := srcDiskDb.NewIteratorWithPrefix(common.RewardExtractPrefix)
	for it1.Next() {
		if len(it1.Key()) < len(common.RewardExtractPrefix)+common.AddressLength {
			return errors.New("RewardExtractPrefix key length is shorter than 34, no address included")
		}
		if err := dstDiskDb.Put(it1.Key(), it1.Value()); err != nil {
			return err
		}
	}
	it1.Release()

	//OosLastBlockKey = []byte("oos-last-block")
	blockBytes, err := srcDiskDb.Get(common.OosLastBlockKey)
	if err == nil {
		if err := dstDiskDb.Put(common.OosLastBlockKey, blockBytes); err != nil {
			return err
		}
	} else if err == leveldb.ErrNotFound {
		fmt.Println("OOS not support yet")
	} else {
		return err
	}

	//ProposedInEpochPrefix = []byte("proposed-in-epoch-") // proposedInEpochPrefix + address + num (uint64 big endian) -> proposedInEpoch value
	it2 := srcDiskDb.NewIteratorWithPrefix(common.ProposedInEpochPrefix)
	for it2.Next() {
		if len(it2.Key()) < len(common.ProposedInEpochPrefix)+common.AddressLength+common.Uint64Len {
			return errors.New("ProposedInEpochPrefix key length is shorter than 46, no address included")
		}
		if err := dstDiskDb.Put(it2.Key(), it2.Value()); err != nil {
			return err
		}
	}
	it2.Release()

	//StartMarkProposalInEpochPrefix = []byte("sp-in-epoch-")
	epochBytes, err := srcDiskDb.Get(common.StartMarkProposalInEpochPrefix)
	if err == nil {
		if err := dstDiskDb.Put(common.StartMarkProposalInEpochPrefix, epochBytes); err != nil {
			return err
		}
	} else if err == leveldb.ErrNotFound {
		fmt.Println("MarkProposalInEpoch not support yet")
	} else {
		return err
	}

	return nil
}

func copyPreimage(ctx *cli.Context, bc *core.BlockChain, dstDiskDb ethdb.Database) error {

	srcDiskDb, _, err := prepareSourceDb(ctx, bc)
	if err != nil {
		return err
	}

	//preimagePrefix = []byte("secure-key-")      // preimagePrefix + hash -> preimage
	it := srcDiskDb.NewIteratorWithPrefix(rawdb.PreimagePrefix)
	defer it.Release()

	preimageCount := 0
	backLen := 0
	content := fmt.Sprintf("%v preimges copied", preimageCount)
	replacePrint(backLen, content)
	backLen = len(content)

	for it.Next() {
		if len(it.Key()) < len(rawdb.PreimagePrefix)+common.HashLength {
			return errors.New("RewardExtractPrefix key length is shorter than 21, no address included")
		}
		if err := dstDiskDb.Put(it.Key(), it.Value()); err != nil {
			return err
		}
		preimageCount++
		content = fmt.Sprintf("%v preimges copied", preimageCount)
		replacePrint(backLen, content)
		backLen = len(content)

		giveABreak()
	}

	fmt.Println("")

	return nil
}

func copyDiverseProperties(ctx *cli.Context, bc *core.BlockChain, dstDiskDb ethdb.Database) error {

	srcDiskDb, _, err := prepareSourceDb(ctx, bc)
	if err != nil {
		return err
	}

	//databaseVerisionKey = []byte("DatabaseVersion") // databaseVerisionKey tracks the current database version.
	dbVersion := rawdb.ReadDatabaseVersion(srcDiskDb)
	rawdb.WriteDatabaseVersion(dstDiskDb, *dbVersion)

	//fastTrieProgressKey = []byte("TrieSync")  // fastTrieProgressKey tracks the number of trie entries imported during fast sync.
	count := rawdb.ReadFastTrieProgress(srcDiskDb)
	rawdb.WriteFastTrieProgress(dstDiskDb, count)

	return nil
}

type Snapshot struct {
	diskDb  ethdb.Database
	stateDb *state.StateDB
}

func (sn *Snapshot) Handle(key, value []byte) {

	sn.diskDb.Put(key, value)
}

func copyLastState(ctx *cli.Context, chainId string, root common.Hash, dstDiskDb ethdb.Database, dstStateDb *state.StateDB) error {

	sn := &Snapshot{
		diskDb:  dstDiskDb,
		stateDb: dstStateDb,
	}

	//new snapshot db
	_, cfg := gethmain.MakeConfigNode(ctx, chainId)
	nodeConfig := cfg.Node
	ethConfig := &cfg.Eth
	diskDb, err := rawdb.NewLevelDBDatabase(nodeConfig.ResolvePath(chaindataDbName), ethConfig.DatabaseCache, ethConfig.DatabaseHandles, "eth/db/chaindata/")
	if err != nil {
		return err
	}

	cacheConfig := &core.CacheConfig{
		TrieCleanLimit: 256,
		TrieDirtyLimit: 256,
		TrieTimeLimit:  5 * time.Minute,
	}

	stateCache := state.NewDatabaseWithCacheSnapshot(diskDb, cacheConfig.TrieCleanLimit, sn)
	stateDb, err := state.New(root, stateCache)
	if err != nil {
		return err
	}

	if err := stateDb.DoSnapshot(sn); err != nil {
		return err
	}

	dstStateCache := state.NewDatabaseWithCache(dstDiskDb, cacheConfig.TrieCleanLimit)
	_, err = state.New(root, dstStateCache)
	if err != nil {
		return err
	}

	diskDb.Close()

	return nil
}

func prepareSourceDb(ctx *cli.Context, bc *core.BlockChain) (ethdb.Database, *state.StateDB, error) {

	stateDb, err := bc.State()
	if err != nil {
		return nil, nil, err
	}

	diskDb := stateDb.Database().TrieDB().DiskDB().(ethdb.Database)

	return diskDb, stateDb, nil
}

func prepareDestinationDb(ctx *cli.Context, chainId string) (ethdb.Database, *state.StateDB, error) {

	//new snapshot db
	_, cfg := gethmain.MakeConfigNode(ctx, chainId)
	nodeConfig := cfg.Node
	ethConfig := &cfg.Eth
	diskDb, err := rawdb.NewLevelDBDatabase(nodeConfig.ResolvePath(snapshotDbName), ethConfig.DatabaseCache, ethConfig.DatabaseHandles, "eth/db/chaindata/")
	if err != nil {
		return nil, nil, err
	}

	cacheConfig := &core.CacheConfig{
		TrieCleanLimit: 256,
		TrieDirtyLimit: 256,
		TrieTimeLimit:  5 * time.Minute,
	}

	stateCache := state.NewDatabaseWithCache(diskDb, cacheConfig.TrieCleanLimit)
	stateDb, err := state.New(common.Hash{}, stateCache)
	if err != nil {
		return nil, nil, err
	}

	return diskDb, stateDb, nil
}

func switchDirectory(ctx *cli.Context, chainId string) error {

	_, cfg := gethmain.MakeConfigNode(ctx, chainId)
	nodeConfig := cfg.Node
	chaindataFullFilename = nodeConfig.ResolvePath(chaindataDbName)
	snapshotFullFilename = nodeConfig.ResolvePath(snapshotDbName)
	backupFullFilename = nodeConfig.ResolvePath(backupDbName)

	if err := os.Rename(chaindataFullFilename, backupFullFilename); err != nil {
		return err
	}

	if err := os.Rename(snapshotFullFilename, chaindataFullFilename); err != nil {
		return err
	}

	return nil
}

func continueWork(block uint64) bool {
	fmt.Printf("snapshot the data with block: %v, continue?(Y/n)", block)
	input := bufio.NewScanner(os.Stdin)
	if input.Scan() {
		text := input.Text()
		if strings.EqualFold(text, "y") || strings.EqualFold(text, "yes") {
			return true
		} else {
			return false
		}
	}
	return false
}

func replacePrint(backlen int, content string) {

	backString := ""
	for i := 0; i < backlen; i++ {
		backString += "\b"
	}
	fmt.Print(backString)
	fmt.Print(content)
}

func giveABreak() {
	time.Sleep(time.Millisecond)
}

func recordToFile(content string) {

	recordFileName := "." + string(os.PathSeparator) + "blockWithDiccTxs.txt"
	file, err := os.OpenFile(recordFileName, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0644)
	if err != nil {
		panic(err)
	}
	defer file.Close()

	if _, err := file.WriteString(content); err != nil {
		panic(err)
	}
}
